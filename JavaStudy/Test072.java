/*===============================
 ■■■ 클래스와 인스턴스 ■■■
================================*/
// ※ 순서
// 1. 클래스 설계				(이 클래스(설계도)로 어떤 메소드로 기능을할지 클래스의 구성을 생각하여 선택)
// 2. 클래서 분류 및 전개		(해당 클래스를 어떤식으로 전개할지 분류)
// 3. 실행						(각 기능에 맞는 메소드들에 대한 코딩을 매개변수를 고려하여 실행)
// 4. 적용						(해당 클래스를 public class에서 어떻게 사용할 수 있는지 해보기)



// 직사각형 클래스 설계

/*
직사각형의 넓이와 둘레 계산, 클래스로 표현

클래스의 정체성 → 직사각형
클래스를 구성하는 속성 → 가로, 세로, (, 넓이, 둘레, 부피, 무게, 재질, 색깔, ...) - 
										()는 넓이,둘레에는 필요하지않은 속성

클래스의 기능	→ 넓이, 둘레 계산, 가로세로 입력, 결과 출력, ...

객체를 구성 → 데이터(속성, 상태, 값) + 기능(행위,동작)	→ 객체 생성
						↓				 ↓					 ||(같은말)
클래스 설계 →		   변수			  + 메소드			→ 인스턴스 생성

----------------------------------

class 직사각형

	// 데이터(속성, 상태) → 멤버변수
	int 가로, 세로;

	// 기능(동작, 행위)	  → 메소드 정의
	가로세로 입력()  → 가로세로를 입력받는 메소드 정의
	{
	}

	둘레 계산()
	{
	}

	넓이 계산()
	{
	}
    
	결과 출력()
	{
	}
    

*/

import java.util.Scanner;		//...3

class Rect		// 직사각형 클래스 설계
{
	// 데이터(속성, 상태) → 멤버변수
	int w, h;

	// 기능(동작, 행위)	  → 메소드 정의
	void input()		//...5. 반환하는 것이 없어서 void → 반환하는게 없기때문에 호출할때는 'input();으로 호출한다'
	{
		Scanner sc = new Scanner(System.in); //...2. 인스턴스 생성

		System.out.print("가로 입력 : ");	//...1. 출력을 위해서 외부로 부터 값을 받아야함
		w = sc.nextInt();					//...4

		System.out.print("세로 입력 : ");
		h = sc.nextInt();
	}

	int calLength()			// ...3
							// 둘레 계산, 먼저 이 메소드 안에서 어떤 일이 벌어질지 예측해야
							// input에서 매개변수를 어떻게 넘겨주는지에 대해 고려할 수 있음
							// input에 있는 매개변수를받을 필요가없고, 받을 수도 없다. w,h는 전역변수로 선언되어서 scope 범위에 보임
							// calLength 시행문 안에서는  둘레계산이 이루어질것이고, 2*(w+h)이므로 여기서 반환된 값을 int로 담아야 할 것
	{
		int result = 0;		// ...1 초기화된 값으로 둘례계산값을 담을 것

		result = (w + h) * 2;

		return result; //...2

	}

	int calArea()			// 넓이 계산, 둘레계산과 마찬가지
	{
		//return w * h; → 이것도 된다
		
		int result = 0;		// 위의 result(둘례계산의 지역변수)와 중복되지않음, scope의 범위내에 없으므로

		result = w * h;

		return result;

	}
    
	void print(int a, int l)			//	...2 (void), 반환하는게 없어서
										// 결과 출력	→	메소드는 특정기능을 위해서 만드는 것이 처리속도 등에서 효율적이다.
										//				→  ex)프린터기, 프린터 복합기  → 출력면에서 프린터기가 '성능이'높다.
										//				→  따라서 하나의 메소드는 여러개의 복합적인 기능보다 '단일연산으로 구성'된 것이 좋다.
										// 따라서, 넓이와 둘레의 매개변수를 받는 메소드 구성이 좋다.
	{
		// 가로 : 10
		// 세로 : 20
		// 넓이 : xxx
		// 둘레 : xx

		System.out.println("가로 : " + w);
		System.out.println("세로 : " + h);

		System.out.println("넓이 : " + a);
		System.out.println("둘레 : " + l);

										// 여기까진 이렇게 출력을 한다해도 사실 반환하는 값이 없다. ...1
	}
    
}
//	※  하나의 자바 파일(.java)에 여러 개의 클래스(class)를 문법적으로는 만들 수 있다.
//	    하지만, 『public class』는 하나만 올 수 있다.(즉, 클래스앞에 public을 취할 수 있는 것은 하나다)
//	    파일을 저장할 때의 이름은
//	    이 『public class』의 이름으로 지정해야 한다.
//	    일반적으로는 하나의 파일에 하나의 클래스를 설계한다.
//		또한, 여러개의 클래스가 설계된 파일을 컴파일하게 되면
//		내부에 설계된 '클래스의 수 만큼 클래스 파일(.class)이 파생된다.'


public class Test072
{
	public static void main(String[] args)
	{
		// Rect 인스턴스 생성
		Rect ob = new Rect();			// 설계도만 있던 Rect가 인스턴스 생성 순간 메모리할당이 되어 호출이 가능하게 된다.

		// 입력 메소드 호출(생성된 인스턴스의 참조변수명을 통해 접근)
		ob.input();						// 여기까지는 가로세로를 입력받긴 하지만 넓이, 둘레에 대한 값과 연산이 이루어 지지 않음

		// 넓이를 연산하는 메소드 호출
		int area = ob.calArea();		// 내부적으로만, main()함수에서 Rect클래스에 있는 인스턴스를 생성한것을 area라는 변수로 담아둔 상태이다.
										// 따라서 출력은 아직 되지 않음
		// 둘레를 연산하는 메소드 호출
		int length = ob.calLength();	// 상동

		// 출력 기능을 수행하는 메소드 호출
		//ob.print(a, l);				// 매개변수의 순서가 중요한것이라 다른이름으로 써도 상관없다.
		ob.print(area, length);

	}
}

// ※ public class 안의 변수 : 전역변수
//	  일반적 class 안의 변수 : 멤버변수
//	  메소드 안의 변수 : 지역변수