/*======================================
	■■■ 클래스와 인스턴스 ■■■
	- 클래스 설계
	- 배열 활용
	- 정보은닉과 접근제어 지시자
======================================*/

// 사용자로부터 년, 월, 일을 입력받아
// 해당 날짜의 요일을 출력하는 프로그램을 구현한다.
// 단, 달력 클래스(Calender)는 사용하지 않는다.
// 또한, 클래스의 개념을 활용하여 작성할 수 있도록 한다. (WeekDay 클래스 설계)
// 그리고, 배열의 개념도 적용시켜 작성할 수 있도록 한다.
// 접근제어지시자의 개념도 확인하여 작성할 수 있도록 한다.
// 최종적으로 WeekDay 클래스의 설계를 통해
// Test102 클래스의 main() 메소드가 정상적으로 프로그램 실행될 수 있도록 한다.

// 실행 예)
// 년 월 일 입력[공백 구분] : 2020 8 19

// 2020년 8월 19일 → 수요일
// 계속하려면 아무 키나 누르세요...

// ※ 1년 1월 1일 → 월요일
// ※ 윤년 vs 평년, 윤달 vs 평달, 
// ※ 1년 1월 1일 -> 2020 8 19 까지의 총 날짜수 / 7 



import java.util.Scanner;

class WeekDay
{
	// 주요 변수 선언
	private int y, m, d;		// 사용자가 입력한 년 월 일을 담아낼 변수


	// 메소드 정의 → 입력받기
	public void input()
	{
		Scanner sc = new Scanner(System.in);

		System.out.print("년 월 일 입력[공백 구분] : ");
		
		y = sc.nextInt();
		m = sc.nextInt();
		d = sc.nextInt();
	}


	// 메소드 정의 → 요일 산출하기
	//public void week()
	public String week()
	{
		// 각 월의 마지막 날짜(각 월의 최대값)를 배열 형태로 구성
		int[] months = {31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
		//				   --- 값을 집어넣어줄거기때문에 아무숫자나 자리세팅용으로 넣어줌

		// 테스트
		// System.out.println(months.length) → 12


		// 요일 이름에 대한 배열 구성
		String[] weekNames = {"일", "월", "화", "수", "목", "금", "토"};
		
		// 날 수를 종합할 변수
		int nalsu;

		// 윤년에 따른 2월의 날 수 계산
		// 입력 년도가 윤년이라면... 2월의 마지막 날짜를 29일로 설정
		// 입력 년도가 평년이라면... 2월의 마지막 날짜를 28일로 설정

		if (y%4==0 && y%100!=0  || y%400==0)		// 윤년
		{
			// 2월의 마지막 날짜를 29일로 설정
			months[1] = 29;
		}
		
		else										// 평년
		{
			// 2월의 마지막 날짜를 29일로 설정
			months[1] = 28;

		}

		// ① 1년 1월 1일 ~ 입력받은 년도의 이전 년도 12월 31일까지의 날 수 계산
		//				    -------------	
		//							y
		//					--------------------------
		//								y-1

		// ex) 2020년 -> (입력이전년도,2019)*365 + 2019/4 - 2019/100 + 2019/400
		nalsu =	(y-1)*365 + (y-1)/4 - (y-1)/100 + (y-1)/400;	// 입력이전년도 12월 31일까지의 날수

		// 테스트(확인)
		//System.out.println("날 수 : " + nalsu); (2020 8 19 기준)
		// 날 수 : 737424 
		// 1. 1. 1. ~ 2019. 12. 31의 총 날 수



		// ② 입력받은 월의 이전 월 까지의 날 수 계산 후
		//	  이 계산 결과를 1번 결과에 누적하는(더하는) 연산
		for (int i=0; i<m-1; i++)
		{
			nalsu += months[i];
		}
		// 737424 + 31 + 29(2020년=윤년) + 31 + 30 + 31 + 30 + 31(7월)

		// 테스트(확인)
		//System.out.println("날 수 : " + nalsu);
		// 날 수 : 737637
		// 1. 1. 1. ~ 2020. 7. 31의 총 날 수



		// ③ 입력받은 일의 날짜만큼 날 수 계산 후
		//	  2번 결과에 누적하는(더하는) 연산
		nalsu += d;
				
		// 테스트(확인)
		//System.out.println("날 수 : " + nalsu);
		// 날 수 : 737656 
		// 1. 1. 1. ~ 2020. 8. 19의 총 날 수

		//------------------------------------------------------------------ 날 수 연산 끝


		// 무슨 요일인지 확인하기 위한 연산
		int w = nalsu % 7;		// 전체날수 % 7 == 0 → 일요일	... ==6 → 토요일
		
		// 테스트(확인)
		System.out.println("요일 : " + w);
		// 요일 : 3 → 수요일

		return weekNames[w];
		// 0 → "일"
		// 1 → "월"
		//    :
	
	}

	public void print(String day)
	{
		System.out.printf("%d년 %d월 %d일 → %s요일\n", y, m, d, day);
	}

}

public class Test102
{
	public static void main(String[] args)
	{
		// WeekDay 기반 인스턴스 생성
		WeekDay wd = new WeekDay();
		
		// 입력 메소드 호출
		wd.input();

		// 요일 산출 메소드 호출 및 결과 확인
		String result = wd.week();

		// 출력 메소드 호출
		wd.print(result);

	}
}

// 입력 결과
/*
년 월 일 입력[공백 구분] : 2020 8 19
요일 : 3
2020년 8월 19일 → 수요일
계속하려면 아무 키나 누르십시오 . . .
*/